 function  [ AMtone ] = makeAMtone(Fm, modIdx, phaseM, Fc, phaseC, TrialTime, audRate,tRamp) %%for debug%  clf %  Fc = 50;      % lower carrier freq will produce less noise from tactile driver. Try 120 Hz% modIdx = 1;         %%  phaseC = 0;         %%  phaseM = 0;         %%  audRate = 44100;   % Audio sampling rate%  tRamp = 0.010; % duration in seconds of on/off cosine ramps%  TrialTime=1.5;% Fm=3.75;% modIdx=1;% fontsize=15;% make the  CARRIER (vector for sinusoid)% clf% Fc=200;cLam = 1/Fc; % wavelength in secondscMat = 1:(TrialTime * audRate);c = .5 * sin(2*pi * cMat/ (cLam*audRate) + phaseC); %carrier% make the MODULATORmLam = 1/Fm;mMat = 1:(TrialTime * audRate);m = 1+ modIdx * cos(2*pi * mMat/ (mLam*audRate) - pi + phaseM );  %changes the range to 0 -1% m =  modIdx * cos(2*pi * mMat/ (mLam*audRate) - pi + phaseM );% % plot(m)%%% combine them and add soft on/off rampsAMtone = (c.*m);rampMat = makeOnOffRamp(tRamp,length(mMat),audRate);AMtone = AMtone.* rampMat;% hold on% plot(AMtone,'b')  AMtone=abs(AMtone);%    plot(AMtone)%    sound(AMtone, 44100)% clf% plot(AMtone)% % timevector =  1:(length(AMtone));% timesecs = timevector/44100;% % subplot(2,1,1)% plot(timesecs, AMtone)% title('AMtone 50hzC','fontsize', 2*fontsize)% hold on% plot([1/3.75 1/3.75], ylim, ['-' 'r'])% % params.tapers= [1, 1];% params.Fs= 44100;% params.fpass = [];% params.pad=[1];% [Spec, Freq] = mtspectrumc(AMtone, params);% % %plot mtspectrum for comparison% %  subplot(2,1,2)% plot(Freq, 10*log10(Spec))% hold on% plot([Fm Fm], ylim, ['r' '--'])%   xlim([0 10])%   ylim([-60 10])% title('mtspectrum', 'fontsize', 2*fontsize)% set(gcf, 'color', 'w')%%end 