  function [AMtone] = makeWhitenoise(Fm, modIdx, phaseM, carFreq, phaseC, TrialTime, audRate, tRamp);

 %% for debug
% clf
%  carFreq = 300;      % lower carrier freq will produce less noise from tactile driver. Try 120 Hz
% modIdx = 1;         %
% phaseC = 0;         %
% phaseM = 0;         %
% audRate = 44100;   % Audio sampling rate
% tRamp = 0.010;      % duration in seconds of on/off cosine ramps
% TrialTime=6;
% Fm=3.75;
% fontsize=15;

%make carrier for (vector for sinusoid)
cLam = 1/carFreq;                       % wavelength in seconds
cMat = 1:(TrialTime * audRate);
c = .5 * sin(2*pi * cMat/ (cLam*audRate) + phaseC); %carrier



% make the MODULATOR
mLam = 1/Fm;
mMat = 1:(TrialTime * audRate);
% m = modIdx * cos(2*pi * mMat/ (mLam*audRate) - pi + phaseM );%changes the range to 0 -1 to match AMtone output
m = 1 + modIdx * cos(2*pi * mMat/ (mLam*audRate) - pi + phaseM );



m=m/2; %performed to keep the maximum values of the sinusoid equal to
%those generated by the makeAMtone func. here wn is all positive [0 1],
%not the carrier [-.5 .5] as in AM tone. hence the need to half before multiplication.

% combine with white noise and add soft on/off ramps
wn = rand(1,length(c));

AMtone = (wn.* m); 



rampMat = makeOnOffRamp(tRamp,length(mMat),audRate);
AMtone = AMtone.* rampMat;

  AMtone=abs(AMtone);
% % 

% subplot(2,1,1)
% plot(AMtone)
% title('WNtone', 'fontsize', 2*fontsize)
% 
% 
% params.tapers= [1, 1];
% params.Fs= 44100;
% params.fpass = [];
% params.pad=[1];
% [Spec, Freq] = mtspectrumc(AMtone, params);
% 
% % %plot mtspectrum for comparison
% 
%  subplot(2,1,2)
% plot(Freq, 10*log10(Spec))
% title('whitenoise', 'fontsize', fontsize)
% hold on
% plot([Fm Fm], ylim, ['r' '--'])
%   xlim([0 16])
% title('mtspectrum', 'fontsize', 2*fontsize)
  end
 
